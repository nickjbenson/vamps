# v4L_3_2_net.py

import numpy as np

class Network(object):
    def __init__(self):
        # Note: This is not a generic Network implementation,
        # but a manually re-expressed set of network
        # weights as trained (and originally implemented) in
        # MATLAB.
        # v4L_3_2_netc, a closed-loop network with 3 hidden
        # layers and 2 delay states in both the input layer and
        # output-feedback-in layer, specifically, as trained
        # on 18-muscle-contraction input and 3-coordinate output
        # (position in 3-space).

        # Input Layer Map #
        self.x1_step1_xoffset =     np.zeros([18,1])
        self.x1_step1_gain =        np.array([[0.2],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.2],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222],
                                         [0.222222222222222]])
        self.x1_step1_ymin =        np.array([-1.])

        # Layer 1 Weights #
        self.b1 =                   np.array([[0.00065987763091318043],
                                              [0.0042076703732417736],
                                              [0.013486284669637361]])
        self.IW1_1 =                np.array([[-1.9678621796274009e-05, -4.0450878571607448e-05, -1.5034129673819033e-05, 1.809794089037311e-05, 5.9753801183248375e-05, 8.3806562551127446e-06, 3.0722457532433342e-05, 4.2050871546686829e-05, 6.9630782787677908e-05, -5.6920539119857332e-06, -2.9110994286337638e-05, -5.082928470357957e-05, 0.00013529695504709582, 0.00020855623369617928, 8.188340503681444e-06, 6.8215968013169592e-05, -0.00015640599329833248, -0.00014439321961258513, 2.082650328992966e-05, 6.2259412744992794e-05, 2.5380451496452171e-05, -2.0863271198724061e-05, -9.5735367177676939e-05, -1.6790508388478417e-05, -2.9554227018339723e-05, -3.8416647491040147e-05, -6.5625097388736584e-05, 7.6022206932054862e-06, 2.4496566458695885e-05, 4.5029879147251219e-05, -0.00012905673904818697, -0.00019524712366156242, -6.2922347945836001e-06, -6.2491905642633608e-05, 0.00014541817735625143, 0.00013247601573092519],
                                              [-2.90694195081336e-06, 2.4612060893867474e-05, -7.7406959003838459e-06, -2.9766548050386532e-05, -2.7704496354756156e-05, 4.2138720754841878e-06, -3.8727260482869131e-05, -5.27407137763906e-06, 1.6160541092767869e-05, 6.0811097489509667e-05, 1.3088425556570369e-05, 2.6269426284929216e-05, -0.00012667254212398336, -9.7866891677596182e-05, 4.4306420776334923e-05, 4.0051570978770402e-05, 0.0001133391681120314, 6.7119627854424923e-05, -4.8411366401792153e-06, -4.9614852009791782e-05, 9.7006292927453635e-06, 3.7605294063365004e-05, 3.3855945394614732e-05, -6.1660826500005782e-06, 3.5734618816759872e-05, 3.1996284796116928e-06, -1.2345818266612157e-05, -5.6674471900831122e-05, -1.1172322573860321e-05, -2.685996595431019e-05, 0.00011900939280967113, 9.2970504104757502e-05, -4.07394747372044e-05, -3.8308616749936109e-05, -0.0001058693393235046, -6.6188759609242312e-05],
                                              [1.647619003536215e-06, 0.00012468524882965895, -2.565494175411101e-05, -5.1323503828713155e-05, 6.1695375449621396e-05, 6.4157007564591805e-05, -0.00033180126386810391, -0.0001160094772286608, 0.00010271838456905628, 0.00015364131541755643, -8.8639827289915897e-05, -0.00039968242438553745, -0.00011228689356873092, 7.9571978749349824e-06, 5.4895008752512213e-05, -2.3968675090577022e-05, 0.00013107291789612733, -0.00011393387725497317, -1.1461058923321984e-05, -0.00013887767594726502, 2.0545664743581253e-05, 5.0514949954997028e-05, -6.9864031354501956e-05, -7.9467549102850689e-05, 0.00031530500084014435, 0.00011506408459869675, -9.0326894211727941e-05, -0.00013622160921781233, 8.7336125889929021e-05, 0.00038051241176378226, 9.9457873190336341e-05, 8.4953686259642837e-07, -4.5859807911368044e-05, 3.526427933511158e-05, -0.00012001092969396378, 0.00010194089065982366]])
        self.LW1_2 =                np.array([[-0.081223041261544546, -0.057143279459888618, 0.006771669122924818, 0.040135111856456414, 0.028333929192587728, -0.0033875438796829738],
                                              [0.044164324522564302, -0.079722579838382684, 0.030782246624106561, -0.021855468584331482, 0.039546686529595157, -0.015269411040496434],
                                              [0.032102113380206646, -0.037825781017404643, -0.16542840822858143, -0.01591081721283643, 0.018650390036886549, 0.081621999706881887]])

        # Layer 2 Weights #
        self.b2 =                   np.array([[-0.057894712118023092],
                                              [0.1194314542117913],
                                              [0.12282204510234485]])
        self.LW2_1 =                np.array([[-17.339056169247275, 11.73364225619061, 1.4715128169048128],
                                              [-10.046173642371162, -16.058786352456693, -3.3775964602204782],
                                              [-1.049799706796962, 5.9426043768276573, -10.861160220593165]])
        
        # Output Layer Weights #
        self.y1_step1_ymin =        np.array([-1])
        self.y1_step1_gain =        np.array([[0.11946096108374],
                                              [0.125199865935984],
                                              [0.176305711282472]])
        self.y1_step1_xoffset =     np.array([[-8.007872],
                                              [-7.577895],
                                              [-6.268979]])

    def get_network_vars(self):
        return (self.x1_step1_xoffset,
                self.x1_step1_gain,
                self.x1_step1_ymin,
                self.b1,
                self.IW1_1,
                self.LW1_2,
                self.b2,
                self.LW2_1,
                self.y1_step1_ymin,
                self.y1_step1_gain,
                self.y1_step1_xoffset)




