# v5d1_3_3_net.py

import numpy as np

class Network(object):
    def __init__(self):
        # Note: This is not a generic Network implementation,
        # but a manually re-expressed set of network
        # weights as trained (and originally implemented) in
        # MATLAB.
        # v5d1_3_3_net, a closed-loop network with 3 hidden
        # layers and 3 delay states in both the input layer and
        # output-feedback-in layer, specifically, as trained
        # on 18-muscle-contraction input and 3-coordinate output
        # (position in 3-space).

        # Input Layer Map #
        self.x1_step1_xoffset =     np.zeros([18,1])
        self.x1_step1_gain =        np.array([[0.2],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.2],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222],
                                              [0.222222222222222]])
        self.x1_step1_ymin =        np.array([-1.])

        # Layer 1 Weights #
        self.b1 =                   np.array([[0.010089444999248161],
                                              [0.046614551364940207],
                                              [-0.0033929057832052471]])
        self.IW1_1 =                np.array([[-1.4435967548543685e-05, -2.1143039701525522e-05, 6.8982994337541512e-06, 3.0004203949374834e-05, -1.3017460113767258e-05, -2.9546553499944501e-05, 4.7003932935878452e-06, -1.7126465468528486e-05, -8.6356749068357754e-05, -6.4548406932364561e-05, 1.8607930070414907e-05, 5.3690301564035864e-05, -1.2614718925934495e-05, -0.0001118415375734043, -2.84079668049117e-05, -7.7955009077118392e-05, 2.9083207082828295e-05, 0.00013998786300846078, 2.889860711796368e-05, 2.3316726437659628e-05, -2.5323941161916269e-05, -2.6508342250757406e-05, 3.7204886166435986e-05, 4.6739707508344006e-05, 1.9256271329813103e-05, 2.5009802771478772e-05, 6.7499797363531009e-05, 4.7767516805961441e-05, 4.9965762061548571e-06, -3.7536096072590721e-05, 4.4234735803421905e-05, 0.00011939353075546243, 3.1467946572059672e-06, 7.0728131259748328e-05, -2.2799595220000417e-05, -0.00013948327616761198, -1.0872671619535575e-05, 2.5230077934955016e-06, 1.4547112525327885e-05, -5.8367463663274606e-06, -8.7865086373418586e-06, -8.3164578262155792e-06, -2.4555715213912032e-05, -8.7893601671346165e-06, 1.5839687190547462e-05, 1.5500564411460833e-05, -2.3340438917458836e-05, -1.5067924292084454e-05, -3.1602287608981132e-05, -1.0619249695035122e-05, 2.382387534290804e-05, 4.8124903026899412e-06, -4.6634570504425469e-06, 3.065905043965008e-06],
                                              [1.2605483051154469e-05, 2.9169132373190701e-05, -4.2383118264970087e-05, 4.584093518233036e-05, 0.000141740510443527, 6.0820077669320503e-05, -0.00045841023075319723, -0.00013915928123766421, 0.00010380565543913118, 0.00014069685852084848, -6.3464068812036067e-05, -0.00043228717133789754, -0.00015779049461761698, 0.00012834002137599162, 3.8724754389992725e-05, 7.5198089600305712e-05, 2.724770665525434e-05, -0.0001577540581794617, -2.8182917262154048e-05, -3.0715838848556709e-06, 3.5145904017091623e-05, -4.6841748648764646e-05, -0.00020840522979468303, -8.9610261909777805e-05, 0.00048531816235961863, 0.00017575150987258066, -6.8370274400155427e-05, -0.00012374667716156555, 6.4711392605497494e-05, 0.00043147039523959928, 0.00012779153168881557, -6.9599513415808059e-05, 1.954910958025161e-05, -5.2443184117869672e-05, 8.0008218258890138e-05, 0.00014146521103883833, 1.3196248589674609e-05, -2.3126672324025593e-05, 5.8283456581719333e-06, -2.0358987032097219e-06, 6.3840417509737325e-05, 2.6611775749941338e-05, -2.9973397862720467e-05, -3.6797057464918891e-05, -3.1994870404725128e-05, -1.2436027346906129e-05, -2.8282043498531459e-06, -4.0841047091582254e-06, 2.5319425723518442e-05, -5.6392939506844336e-05, -5.5763731402731736e-05, -1.8899453235009002e-05, -0.00010577395252753454, 1.40101345332198e-05],
                                              [2.799966728345252e-05, 6.1970624278529605e-05, -9.4119887481770495e-06, -2.4076411475707932e-05, -4.6609718695664546e-05, -2.1307636962111783e-05, -0.00015628188279088757, -6.7005710849103416e-05, -4.4455564599892325e-05, 9.4808836929892418e-05, 3.0657110902455095e-05, 6.1290558881599505e-05, -0.00035886489999846629, -0.00034697403200884496, 0.00011345526822851663, -3.1374826800396152e-06, 0.00036153133811802962, 0.00026748456600132433, -4.312656478558466e-05, -0.00015007371811345851, 1.5110298877931982e-06, 5.0883061551348491e-05, 0.00012208948717039233, 2.888214356053213e-05, 0.00015269128363642873, 4.2543684561073533e-05, 4.4216010572772629e-05, -7.690781653976049e-05, -1.6802367758469053e-05, -6.4489321183981116e-05, 0.00041208075311329015, 0.0003819602972768624, -0.00015565412024595065, 5.3457108626744135e-05, -0.00039594773785578093, -0.00031397996751537298, 1.178173313078134e-05, 7.5637240201390307e-05, 4.8019023640493924e-06, -2.3842225199946659e-05, -6.2655913135514578e-05, -5.2662994239586499e-06, 2.7997535604535027e-06, 2.2263478194363468e-05, -1.1991412646638854e-06, -1.6053682387393804e-05, -1.2761667426146977e-05, 4.5069362845297241e-06, -5.6894743441614796e-05, -4.0919816866491691e-05, 4.2142975891027037e-05, -5.1234554617809094e-05, 3.9223035536585902e-05, 4.9972121269709175e-05]])
        self.LW1_2 =                np.array([[0.045361631113312192, 0.20121248802041183, -0.070945198371012347, -0.039899849939553686, -0.17742846751631725, 0.0633519619773142, 0.011620279547079027, 0.051760265240833402, -0.018805313492108861], 
                                              [-0.05345327466333924, -0.096083182214915991, -0.32764324835436004, 0.046742231699440154, 0.10896390941123212, 0.28717392694213933, -0.013547994010208609, -0.040839750468671214, -0.084253019415139269],
                                              [0.23329296609125022, -0.057595653903413944, -0.019818381735757812, -0.20446123560690793, 0.053167981173542544, 0.016987060600918129, 0.059149348146558332, -0.016381891127591919, -0.0048799926170547576]])

        # Layer 2 Weights #
        self.b2 =                   np.array([[0.066013225818404034],
                                              [-0.020090592907827012],
                                              [0.36755187132081701]])
        self.LW2_1 =                np.array([[2.4862187761204031, -1.1821671437310837, 10.613519286467071],
                                              [11.631726225992393, -2.2903837910829621, -2.7851090946358212],
                                              [-3.0110892659845896, -7.3169422190712314, -1.0999875420298331]])
        
        # Output Layer Weights #
        self.y1_step1_ymin =        np.array([-1])
        self.y1_step1_gain =        np.array([[0.116667280142115],
                                              [0.126678016594693],
                                              [0.1537537478437]])
        self.y1_step1_xoffset =     np.array([[-8.584711],
                                              [-7.465652],
                                              [-7.944243]])

    def get_network_vars(self):
        return (self.x1_step1_xoffset,
                self.x1_step1_gain,
                self.x1_step1_ymin,
                self.b1,
                self.IW1_1,
                self.LW1_2,
                self.b2,
                self.LW2_1,
                self.y1_step1_ymin,
                self.y1_step1_gain,
                self.y1_step1_xoffset)




